initSidebarItems({"attr":[["safe_wrap","Given an `extern \"C\"` block of function declarations, generate the safe wrapper for the function."]],"macro":[["init_strn","Initialise a null-terminated bytestring `Strn` that's suitable for passing to Mynewt APIs `init_strn!(\"network\")` expands to `Strn{ rep: ByteStr(b\"network\\0\") }` Used like this: `static STATIC_STRN: Strn = init_strn!(\"network\"); let local_strn = init_strn!(\"network\");`"],["out","Given a static mutable variable, return an unsafe mutable pointer that's suitable for passing to Mynewt APIs for writing output. `out!(NETWORK_TASK)` expands to `unsafe { &mut NETWORK_TASK }`"],["strn","Create a `Strn` containing a null-terminated byte string that's suitable for passing to Mynewt APIs. `strn!(\"network\")` expands to `&Strn::new( b\"network\\0\" )`. `strn!(())` expands to `&Strn::new( b\"\\0\" )`. For macro calls like `strn!( stringify!( value ) )`, return `&Strn::new( b\"value\\0\" )`. For complex macro calls like `strn!( $crate::parse!(@ json device_id) )`, return the parameter as is."],["try_cbor","Transform a block of CBOR encoding calls by adding error checking. All lines must terminate with `;` `try_cbor!({     let encoder = COAP_CONTEXT.encoder(\"COAP_CONTEXT\", \"_map\");     cbor_encode_text_string(         encoder,         COAP_CONTEXT.key_to_cstr(key_with_opt_null),         COAP_CONTEXT.cstr_len(key_with_opt_null));     cbor_encode_int(encoder, value); })` expands to: `unsafe {     let encoder = COAP_CONTEXT.encoder(\"COAP_CONTEXT\", \"_map\");     let res =         tinycbor::cbor_encode_text_string(encoder,           COAP_CONTEXT.key_to_cstr(key_with_opt_null),           COAP_CONTEXT.cstr_len(key_with_opt_null));     COAP_CONTEXT.check_result(res);     let res = tinycbor::cbor_encode_int(encoder, value);     COAP_CONTEXT.check_result(res); }`"]],"mod":[["safe_wrap","Mynewt Macro that creates a safe wrapper"]]});