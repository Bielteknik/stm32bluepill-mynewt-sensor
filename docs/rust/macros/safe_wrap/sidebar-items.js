initSidebarItems({"enum":[["Separator","Separator for composing declarations and call expressions"]],"fn":[["collect_call","Collect the Call Expressions for all args. Return a TokenStream of the call expressions for the wrapper function: `t, name.bytestr.as_ptr() as *const ::cty::c_char, ...` Preserve the span info for error display."],["collect_validation","Collect the Validate Statements for all args. Return a TokenStream of the validation statements for the wrapper function: `Strn::validate_bytestr(name.bytestr); ...` Preserve the span info for error display."],["collect_wrap","Collect the Wrapped Declarations for all args. Return a TokenStream of the declarations for the wrapper function: `t: Out<os_task>, name: &Strn, func: os_task_func_t, ...` Preserve the span info for error display."],["expand_decl","Given identifier `ident` and type `ty`, return the tokens for the declaration `ident: ty`. Preserve the identifier and type spans specified in `ident_span` and `type_span`."],["function_is_whitelisted","Given a function name like `os_task_init`, return true if we should create the wrapper"],["get_namespace","Given a function name like `os_task_init`, return the namespace (`os`)"],["safe_wrap_internal","Given an `extern \"C\"` block of function declarations, generate the safe wrapper for the function."],["transform_arg","Transform the extern arg for Wrap declaration, Validation statement and Call expression."],["transform_arg_list","Given a list of extern function arg declarations, return the transformed args."],["transform_function_name","Transform the extern function name e.g. `os_task_init`"],["transform_return_type","Transform the extern return type e.g. `:: cty :: c_int` becomes `MynewtResult< () >`"],["wrap_function","Return the safe wrapper tokens for the extern function"]],"struct":[["TransformedArg","Extern arg declaration transformed into the Wrap, Validation and Call forms "],["TransformedFunctionName","Extern function name transformed"],["TransformedReturnType","Extern return type declaration transformed"]]});