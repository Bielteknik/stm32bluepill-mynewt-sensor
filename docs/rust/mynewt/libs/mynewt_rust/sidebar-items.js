initSidebarItems({"constant":[["sensor_event_type_t_SENSOR_EVENT_TYPE_DOUBLE_TAP",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_FREE_FALL",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_X_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_X_H_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_X_L_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Y_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Y_H_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Y_L_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Z_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Z_H_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_ORIENT_Z_L_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_SINGLE_TAP",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_SLEEP",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_SLEEP_CHANGE",""],["sensor_event_type_t_SENSOR_EVENT_TYPE_WAKEUP",""],["sensor_type_t_SENSOR_TYPE_ACCELEROMETER",""],["sensor_type_t_SENSOR_TYPE_ALL",""],["sensor_type_t_SENSOR_TYPE_ALTITUDE",""],["sensor_type_t_SENSOR_TYPE_AMBIENT_TEMPERATURE",""],["sensor_type_t_SENSOR_TYPE_COLOR",""],["sensor_type_t_SENSOR_TYPE_EULER",""],["sensor_type_t_SENSOR_TYPE_GRAVITY",""],["sensor_type_t_SENSOR_TYPE_GYROSCOPE",""],["sensor_type_t_SENSOR_TYPE_LIGHT",""],["sensor_type_t_SENSOR_TYPE_LINEAR_ACCEL",""],["sensor_type_t_SENSOR_TYPE_MAGNETIC_FIELD",""],["sensor_type_t_SENSOR_TYPE_NONE",""],["sensor_type_t_SENSOR_TYPE_PRESSURE",""],["sensor_type_t_SENSOR_TYPE_PROXIMITY",""],["sensor_type_t_SENSOR_TYPE_RELATIVE_HUMIDITY",""],["sensor_type_t_SENSOR_TYPE_ROTATION_VECTOR",""],["sensor_type_t_SENSOR_TYPE_TEMPERATURE",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_1",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_2",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_3",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_4",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_5",""],["sensor_type_t_SENSOR_TYPE_USER_DEFINED_6",""],["sensor_type_t_SENSOR_TYPE_WEIGHT",""]],"fn":[["device_get_name","Return the name for the Mynewt device.  Assumes name is non-null."],["get_temp_data","Interpret `sensor_data` as a `sensor_temp_data` struct that contains computed temp. Copy the sensor data into `dest`.  Return 0 if successful."],["get_temp_raw_data","Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp. Copy the sensor data into `dest`.  Return 0 if successful."],["is_null_sensor","Return non-zero if sensor is NULL."],["is_null_sensor_data","Return non-zero if sensor data is NULL."],["json_helper_close_array","End the child array and resume writing the parent object. `{a:b, key:[... --> {a:b, key:[...]`"],["json_helper_object_array_end_item","End an array item, assumed to be an object. `[... --> [...,`"],["json_helper_object_array_start_item","Assume we have called `set_array`.  Start an array item, assumed to be an object. `[... --> [...,`"],["json_helper_set_array","Assume we are writing an object now.  Write the key name and start a child array. `{a:b --> {a:b, key:[`"],["json_helper_set_float","Encode a float value into the current JSON encoding value `coap_json_value`"],["json_helper_set_int","Encode an int value into the current JSON encoding value `coap_json_value`"],["json_helper_set_text_string","Encode a text value into the current JSON encoding value `coap_json_value`"],["json_helper_set_uint","Encode an unsigned int value into the current JSON encoding value `coap_json_value`"],["null_sensor","Return the NULL sensor."],["rust_sysinit","Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C."],["sensor_get_device","Return the Mynewt device for the Mynewt sensor."]],"struct":[["__BindgenBitfieldUnit",""],["os_dev__bindgen_ty_1",""],["os_event__bindgen_ty_1",""],["os_mutex__bindgen_ty_1",""],["os_sanity_check__bindgen_ty_1",""],["os_task__bindgen_ty_1",""],["os_task__bindgen_ty_2",""],["os_task__bindgen_ty_3",""],["sensor__bindgen_ty_1",""],["sensor__bindgen_ty_2",""],["sensor__bindgen_ty_3",""],["sensor__bindgen_ty_4",""],["sensor_listener__bindgen_ty_1",""],["sensor_notifier__bindgen_ty_1",""],["sensor_temp_raw_data","Represents a single temperature sensor raw value"],["sensor_type_traits__bindgen_ty_1",""]],"type":[["__int16_t",""],["__int32_t",""],["__int64_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["os_dev_close_func_t",""],["os_dev_init_func_t","Initialize a device."],["os_dev_open_func_t",""],["os_dev_resume_func_t",""],["os_dev_suspend_func_t",""],["os_event_fn",""],["os_sanity_check_func_t",""],["os_stack_t",""],["os_task_func_t",""],["os_time_t",""],["sensor_clear_trigger_thresh_t","Clear the high/low threshold values for a specific sensor for the sensor type."],["sensor_data_func_t","Callback for handling sensor data, specified in a sensor listener."],["sensor_error_func_t","Callback for reporting a sensor read error."],["sensor_event_type_t",""],["sensor_get_config_func_t","Get the configuration of the sensor for the sensor type.  This includes the value type of the sensor."],["sensor_handle_interrupt_t","Let driver handle interrupt in the sensor context"],["sensor_notifier_func_t","Callback for event notifications."],["sensor_read_func_t","Read a single value from a sensor, given a specific sensor type (e.g. SENSOR_TYPE_PROXIMITY)."],["sensor_reset_t","Reset Sensor function Ptr"],["sensor_set_config_func_t","Send a new configuration register set to the sensor."],["sensor_set_notification_t","Set the notification expectation for a targeted set of events for the specific sensor. After this function returns successfully, the implementer shall post corresponding event notifications to the sensor manager."],["sensor_set_trigger_thresh_t","Set the trigger and threshold values for a specific sensor for the sensor type."],["sensor_trigger_cmp_func_t","Callback for trigger compare functions."],["sensor_type_t",""],["sensor_unset_notification_t","Unset the notification expectation for a targeted set of events for the specific sensor."]]});