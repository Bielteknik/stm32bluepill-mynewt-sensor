initSidebarItems({"fn":[["as_untyped","Cast sensor data function from typed to untyped"],["null_sensor_data_func","Define a default sensor data function in case there is none."],["register_listener","Register a sensor listener. This allows a calling application to receive callbacks for data from a given sensor object. This is the safe version of `sensor_register_listener()` that copies the listener locally before passing to Mynewt. For more information on the type of callbacks available, see the documentation for the sensor listener structure. `sensor`: The sensor to register a listener on. `listener`: The listener to register onto the sensor. Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure."]],"mod":[["bindings","Contains the auto-generated Rust bindings for the Mynewt Sensor API"]],"static":[["LISTENER_INTERNAL","Define the listener function to be called after polling the sensor. This is a static mutable copy of the listener passed in through `register_listener`. Must be static so it won't go out of scope.  Must be mutable so that Rust won't move it while Mynewt is using it."]],"type":[["sensor_arg","Points to sensor arg passed by Mynewt to sensor listener"],["sensor_data_func","Sensor data function that returns `MynewtError` instead of `i32`"],["sensor_data_func_untyped","Sensor data function that returns `i32` instead of `MynewtError`"],["sensor_data_ptr","Points to sensor data passed by Mynewt to sensor listener"],["sensor_ptr","Points to a `sensor`.  Needed because `sensor` also refers to a namespace."]]});