initSidebarItems({"constant":[["NETWORK_TASK_STACK_SIZE","Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  "]],"fn":[["network_task_func","Network Task runs this function in the background to prepare the network drivers (ESP8266 and nRF24L01) for transmitting sensor data messages.  Also perform WiFi Geolocation if it is enabled. For Collector Node and Standalone Node: We connect the ESP8266 to the WiFi access point.  Connecting the ESP8266 to the WiFi access point may be slow so we do this in the background. Register the ESP8266 driver as the network transport for CoAP Server.   For Collector Node and Sensor Nodes: We register the nRF24L01 driver as the network transport for  CoAP Collector."],["send_sensor_data","Compose a CoAP message (CBOR or JSON) with the sensor value in `val` and transmit to the Collector Node (if this is a Sensor Node) or to the CoAP Server (if this is a Collector Node or Standalone Node).   For Sensor Node or Standalone Node: sensor_node is the sensor name (`bme280_0` or `temp_stm32_0`) For Collector Node: sensor_node is the Sensor Node Address of the Sensor Node that transmitted the sensor data (like `b3b4b5b6f1`) The message will be enqueued for transmission by the CoAP / OIC Background Task  so this function will return without waiting for the message to be transmitted.   Return 0 if successful, SYS_EAGAIN if network is not ready yet."],["send_sensor_data_to_collector","Compose a CoAP CBOR message with the Sensor Key (field name) and Value in val and  transmit to the Collector Node.  The Sensor Value should be integer not float since we transmit integers only to the Collector Node. For temperature, the Sensor Key is `t` for raw temperature (integer, from 0 to 4095). The message will be enqueued for transmission by the CoAP / OIC  Background Task so this function will return without waiting for the message  to be transmitted.  Return 0 if successful, `SYS_EAGAIN` if network is not ready yet. The CoAP payload needs to be very compact (under 32 bytes) so it will be encoded in CBOR like this: `{ t: 2870 }`"],["send_sensor_data_to_server","Compose a CoAP JSON message with the Sensor Key (field name) and Value in val  and send to the CoAP server and URI.  The Sensor Value may be integer or float. For temperature, the Sensor Key is either `t` for raw temperature (integer, from 0 to 4095)  or `tmp` for computed temperature (float). The message will be enqueued for transmission by the CoAP / OIC  Background Task so this function will return without waiting for the message  to be transmitted.  Return 0 if successful, `SYS_EAGAIN` if network is not ready yet. For the CoAP server hosted at thethings.io, the CoAP payload should be encoded in JSON like this: `{\"values\":[   {\"key\":\"device\", \"value\":\"0102030405060708090a0b0c0d0e0f10\"},   {\"key\":\"tmp\",    \"value\":28.7},   {\"key\":\"...\",    \"value\":... },   ... ]}`"],["start_network_task","Start the Network Task in the background.  The Network Task prepares the network drivers (ESP8266 and nRF24L01) for transmitting sensor data messages.   Connecting the ESP8266 to the WiFi access point may be slow so we do this in the background. Also perform WiFi Geolocation if it is enabled.  Return 0 if successful."],["test_json",""]],"static":[["NETWORK_IS_READY","Set to true when network tasks have been completed"],["NETWORK_TASK","Storage for Network Task: Mynewt task object will be saved here."],["NETWORK_TASK_STACK","Stack space for Network Task, initialised to 0."]],"struct":[["Context",""]]});