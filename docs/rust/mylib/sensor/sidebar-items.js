initSidebarItems({"constant":[["SENSOR_TYPE_USER_DEFINED_1","Mynewt User-Defined Sensor Type 1. Must sync with repos/apache-mynewt-core/hw/sensor/include/sensor/sensor.h"],["SENSOR_VALUE_TYPE_FLOAT",""],["SENSOR_VALUE_TYPE_INT32",""],["SENSOR_VALUE_TYPE_OPAQUE","Mynewt Sensor Value Types. Must sync with repos/apache-mynewt-core/hw/sensor/include/sensor/sensor.h"],["SYS_EACCES",""],["SYS_EAGAIN",""],["SYS_EALREADY",""],["SYS_EBUSY",""],["SYS_EDONE",""],["SYS_EINVAL",""],["SYS_EIO",""],["SYS_ENODEV",""],["SYS_ENOENT",""],["SYS_ENOMEM",""],["SYS_ENOTSUP",""],["SYS_EOK","Mynewt error codes. Must sync with repos/apache-mynewt-core/sys/defs/include/defs/error.h"],["SYS_EPERUSER",""],["SYS_ERANGE",""],["SYS_EREMOTEIO",""],["SYS_ETIMEOUT",""],["SYS_EUNKNOWN",""]],"enum":[["CVoid","Declare the void C type.  From https://github.com/hashmismatch/freertos.rs/blob/master/src/base.rs"]],"fn":[["null_sensor_data_func","Define a dummy sensor data function in case there is none."],["register_listener","Register a sensor listener. This allows a calling application to receive callbacks for data from a given sensor object. This is the safe version of `sensor_register_listener()` that copies the listener locally before passing to Mynewt."],["sensor_mgr_find_next_bydevname","Search the sensor list and find the next sensor that corresponds to a given device name. `devname`: The device name to search for. `sensor`: The previous sensor found with this device name. Return 0 on success, non-zero error code on failure"],["sensor_register_listener","Register a sensor listener. This allows a calling application to receive callbacks for data from a given sensor object."],["sensor_set_poll_rate_ms","Set the sensor poll rate. `devname`: Name of the sensor. `poll_rate`: The poll rate in milli seconds."]],"static":[["LISTENER_INTERNAL","Define the listener function to be called after polling the sensor. This is a static mutable copy of the listener passed in through `register_listener`. Must be static so it won't go out of scope.  Must be mutable so that Rust won't move it while Mynewt is using it."]],"struct":[["SensorListener","Import the Mynewt SensorListener struct for C, which defines the listener function to be called after polling a sensor. Must sync with repos/apache-mynewt-core/hw/sensor/include/sensor/sensor.h"],["SensorTempData","Data representing a singular read from a temperature sensor. All values are in Deg C. Must sync with repos/apache-mynewt-core/hw/sensor/include/sensor/temperature.h"]],"type":[["DevicePtr","Declare a pointer to the Mynewt `os_dev` struct.  The contents are hidden."],["SensorArg",""],["SensorDataFunc","Mynewt Sensor Types. Must sync with repos/apache-mynewt-core/hw/sensor/include/sensor/sensor.h"],["SensorDataPtr",""],["SensorMutPtr",""],["SensorPtr",""],["SensorType",""]]});